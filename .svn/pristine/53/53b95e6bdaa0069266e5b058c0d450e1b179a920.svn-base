package com.pb.services.book;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import net.sf.json.util.JSONUtils;

import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.pb.entity.Book;
import com.pb.entity.History;
import com.pb.entity.Message;
import com.pb.entity.User;
import com.pb.json.BookJson;
import com.pb.json.SearchBookJson;
import com.pb.services.common.CommService;

@Service(value = "bookService")
public class BookService extends CommService {

	/**
	 * 根据isbn获取所有书架上的书籍
	 * 
	 * @param isbn
	 * @return
	 */
	public List<BookJson> getBooksByISBN(String isbn) {
		List<BookJson> book = baseDAO.findBySQLForVO("SELECT book_id AS bookId,isbn AS isbn,describes AS describes,"
				+ "store_id AS storeId,user_id AS userId,user_name AS userName,"
				+ "store_name AS storeName,headPic AS headPic,store_describe AS storeDescribe,"
				+ "author AS author,title AS title,publisher AS publisher,image AS bookImageURI,"
				+ "url AS douBanURI,binding AS binding,price AS price,page AS page,"
				+ "rating AS rating FROM book NATURAL JOIN bookstore NATURAL JOIN `user`" + "WHERE book.isbn = ?; ",
				BookJson.class, new Object[] { isbn });

		return book;
	}
	
	/**
	 * 根据关键字和GEOHASH查询 附近的书籍
	 * @param keyword
	 * @param positionGeo
	 * @return
	 */
	public List<SearchBookJson> getBooksByKeyword(String keyword,String positionGeo) {
		List<String> geo = stringToList(positionGeo,String.class);
		List<SearchBookJson> book = baseDAO.findBySQLForVO("SELECT user_id as userId,user_name as userName,author as author,headPic as headpic,"
				+ "phone as phone,book_id as bookId,image as image,latitude as lat ,longtitude as lon,title as title "
				+ "FROM book NATURAL JOIN bookstore "
				+ "NATURAL JOIN address NATURAL JOIN `user` WHERE address.geohash LIKE ? "
				+ "AND book.title = ?;",
				SearchBookJson.class, new Object[] { geo.get(0).substring(0, 4)+"%",keyword});

		return book;
	}
	/**
	 * 借书逻辑：在History中添加一条 “借入” 记录，一条“借出”，删除Book上的书，返回留言
	 * @param book_id
	 * @param userid
	 * @return
	 */
	public String borrowBook(int book_id,int userid) {
		List<Book> book = baseDAO.findByHQL("from Book book where book.bookId = ?",new Object[]{book_id});
		if(book.size()==0)return "0001";//该书不存在
		else{
			List<User> user = baseDAO.findByHQL("from User user where user.userId = ?",new Object[]{userid});
			if(user.size()==0){
				return "0002";//重新登陆后尝试
			}
			
			//積分扣除
			int sc = user.get(0).getScore();
			sc--;
			if(sc<0) return "0004";
			user.get(0).setScore(sc);
			baseDAO.save(user.get(0));
			
			//"借入"记录
			History h1 = new History();
			h1.setOperType("借入");
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
			h1.setOperTime(df.format(new Date()));
			h1.setUser(user.get(0));
			h1.setBookName(book.get(0).getTitle());
			h1.setIsbn(book.get(0).getIsbn());
			h1.setMessage(book.get(0).getMessage());
			baseDAO.save(h1);
			
			//"借出"记录
			List<User> user2 = baseDAO.findByHQL("from User user where user.bookstore.storeId = ?",new Object[]{book.get(0).getBookstore().getStoreId()});	
			if(user2.size()==0){
				return "0003";//系统出错
			}
			History h2 = new History();
			h2.setOperType("借出");
			h2.setOperTime(df.format(new Date()));
			h2.setUser(user2.get(0));
			h2.setBookName(book.get(0).getTitle());
			h2.setIsbn(book.get(0).getIsbn());
			h2.setMessage(book.get(0).getMessage());
			baseDAO.save(h2);

			
			
			//"删除"书架上的书籍
			baseDAO.delete(book.get(0));
			return book.get(0).getMessage();
		}
	}
	
    /**
     * 把json 字符串转化成list
     * @param json
     * @param cls
     * @param <T>
     * @return
     */
    public static <T> List<T> stringToList(String json , Class<T> cls  ){
        Gson gson = new Gson();
        List<T> list = new ArrayList<T>();
        JsonArray array = new JsonParser().parse(json).getAsJsonArray();
        for(final JsonElement elem : array){
            list.add(gson.fromJson(elem, cls));
        }
        return list ;
    }
}
